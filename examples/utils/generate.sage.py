

# This file was *autogenerated* from the file examples/utils/generate.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_4 = Integer(4); _sage_const_0p0001 = RealNumber('0.0001'); _sage_const_0p01 = RealNumber('0.01'); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
import os
import random
from json import dump

def generate(path):
    n = random.randint(_sage_const_10 , _sage_const_10 **_sage_const_4 )
    p = random.uniform(_sage_const_0p0001 , _sage_const_0p01 )
    print(n, p)

    g = graphs.RandomGNP(n, p)

    while not g.is_connected():
        n = random.randint(_sage_const_10 , _sage_const_10 **_sage_const_4 )
        p = random.uniform(_sage_const_0p0001 , _sage_const_0p01 )
        print(p)
        g = graphs.RandomGNP(n, p)

    dict = {v: [] for v in range(n)}
    for e in g.edges():
        u, v = e[:_sage_const_2 ]
        dict[int(v)].append(int(u))
        dict[int(u)].append(int(v))

    d = g.diameter()
    name = "{}_{}_{}.json".format(g.order(), g.size(), d)
    print(name)

    with open(path+'/'+name, 'w') as f:
        dump(dict, f, indent=_sage_const_2 )

for _ in range(_sage_const_5  * _sage_const_10 **_sage_const_3 ):
    generate(sys.argv[_sage_const_1 ])

